services:
  eshop.server:
    image: eshop.server
    build:
      context: ./eshop.server
      dockerfile: ./dockerfile
    env_file:
      - ./eshop.server/.env.prod
    ports:
      - "3000:3000"
    expose:
      - 3000
    depends_on:
      - eshop.broker
      - eshop.redis
    networks:
      - eshopnetwork
    restart: always
  eshop.client:
    build:
      context: ./eshop.client
      dockerfile: ./dockerfile
    env_file:
      - ./eshop.client/.env
    ports:
      - "80:80"
    expose:
      - 80
    networks:
      - eshopnetwork
    depends_on:
      - eshop.server
  eshop.order:
    build:
      context: ./eshop.order
      dockerfile: ./dockerfile
    env_file:
      - ./eshop.order/.env.prod
    depends_on:
      - eshop.broker
    networks:
      - eshopnetwork
  eshop.broker:
    container_name: rabbitmq
    image: rabbitmq
    ports:
      - "5672:5672"
    expose:
      - 5672
    environment:
      RABBITMQ_NODE_PORT: 5672
    networks:
      - eshopnetwork
  eshop.redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    expose:
      - 6379
    networks:
      - eshopnetwork
  eshop.db:
    container_name: eshop.db
    image: postgres
    networks:
      - eshopnetwork
    env_file:
      - ./eshop.db/.env # Path to the environment file
    ports:
      - "54132:5432"
    expose:
      - 54132
    volumes:
      - data-1:/var/lib/postgresql/data
  eshop.order.db:
    container_name: eshop.order.db
    image: postgres
    networks:
      - eshopnetwork
    env_file:
      - ./eshop.db/.env.order # Path to the environment file
    ports:
      - "5432:5432"
    expose:
      - 5432
    volumes:
      - data-2:/var/lib/postgresql/data
volumes:
  data-1:
    driver: local
    driver_opts:
      type: none
      device: ${POSTGRES_VOLUME_PATH_1}
      o: bind
  data-2:
    driver: local
    driver_opts:
      type: none
      device: ${POSTGRES_VOLUME_PATH_2}
      o: bind
networks:
  eshopnetwork:
    driver: bridge
